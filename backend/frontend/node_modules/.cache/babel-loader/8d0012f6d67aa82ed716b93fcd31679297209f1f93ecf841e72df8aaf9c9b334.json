{"ast":null,"code":"const commonPasswords=[\"123456\",\"password\",\"123456789\",\"12345678\",\"12345\",\"1234567\",\"qwerty\",\"abc123\",\"password1\",\"123123\",\"letmein\",\"welcome\",\"monkey\",\"admin\",\"football\",\"123qwe\",\"passw0rd\",\"iloveyou\",\"1q2w3e4r\",\"sunshine\",\"master\",\"zaq1zaq1\",\"qwertyuiop\",\"login\",\"access\",\"password123\",\"654321\",\"superman\",\"trustno1\",\"1234\",\"baseball\",\"batman\",\"dragon\",\"michael\",\"superman\",\"charlie\",\"hannah\",\"whatever\",\"jordan23\",\"shadow\",\"monkey123\",\"soccer\",\"freedom\",\"maggie\",\"hello\",\"secret\",\"princess\",\"starwars\",\"qazwsx\",\"qwe123\",\"1qaz2wsx\",\"loveme\",\"cheese\",\"asdfghjkl\",\"zaq12wsx\",\"qwerty123\",\"q1w2e3r4\",\"abcd1234\",\"password!\",\"ninja\",\"welcome1\",\"abcde\",\"mypass\",\"123abc\",\"iloveu\",\"asdf1234\",\"7777777\",\"987654321\",\"q1w2e3r4t5\",\"pass123\",\"love\",\"dragon\",\"letmein123\",\"princess1\",\"zaq1xsw2\",\"111111\",\"123321\",\"12345qwert\",\"1qaz\",\"qwe12345\",\"admin123\",\"1111\",\"asdf123\",\"hello123\",\"112233\",\"admin1\",\"letmein!\",\"trustme\",\"1q2w3e\",\"password321\",\"test123\",\"pa55word\",\"loveyou\",\"password2\",\"123qwerty\",\"987654\",\"iloveme\",\"asdf\",\"123654\",\"123qaz\",\"hello1\",\"mypassword\",\"happy123\"];export const validatePassword=(password,confirmPassword,name,email)=>{const errors={};// Minimum length validation (8 characters)\nif(password.length<8){errors.password='Password must be at least 8 characters long.';return errors;// Exit early to avoid other checks\n}// Password similarity to user attributes (e.g., name, email)\nif(name&&password.toLowerCase().includes(name.toLowerCase())){errors.password='Password is too similar to your name.';}if(email&&password.toLowerCase().includes(email.split('@')[0].toLowerCase())){errors.password='Password is too similar to your email.';}// Common password validation\nif(commonPasswords.includes(password)){errors.password='Password is too common, please choose a more secure one.';}// Enhanced password validation with regex for complexity\nconst passwordRegex=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*?])[A-Za-z\\d!@#$%^&*?]{8,}$/;if(!passwordRegex.test(password)){errors.password=\"Password must contain at least one uppercase letter, \\n        one lowercase letter, one number, and one special character (@$!%*?&)\";}// Confirm Password validation\nif(password!==confirmPassword){errors.confirmPassword='Passwords do not match.';}return errors;};","map":{"version":3,"names":["commonPasswords","validatePassword","password","confirmPassword","name","email","errors","length","toLowerCase","includes","split","passwordRegex","test"],"sources":["C:/Users/user/Documents/Python/Django-React_Ecommerce/StankinShop/backend/frontend/src/validators/passwordValidator.js"],"sourcesContent":["const commonPasswords = [\r\n    \"123456\", \"password\", \"123456789\", \"12345678\", \"12345\", \"1234567\", \r\n    \"qwerty\", \"abc123\", \"password1\", \"123123\", \"letmein\", \"welcome\", \r\n    \"monkey\", \"admin\", \"football\", \"123qwe\", \"passw0rd\", \"iloveyou\", \r\n    \"1q2w3e4r\", \"sunshine\", \"master\", \"zaq1zaq1\", \"qwertyuiop\", \r\n    \"login\", \"access\", \"password123\", \"654321\", \"superman\", \r\n    \"trustno1\", \"1234\", \"baseball\", \"batman\", \"dragon\", \"michael\", \r\n    \"superman\", \"charlie\", \"hannah\", \"whatever\", \"jordan23\", \r\n    \"shadow\", \"monkey123\", \"soccer\", \"freedom\", \"maggie\", \r\n    \"hello\", \"secret\", \"princess\", \"starwars\", \"qazwsx\", \r\n    \"qwe123\", \"1qaz2wsx\", \"loveme\", \"cheese\", \"asdfghjkl\", \r\n    \"zaq12wsx\", \"qwerty123\", \"q1w2e3r4\", \"abcd1234\", \"password!\", \r\n    \"ninja\", \"welcome1\", \"abcde\", \"mypass\", \"123abc\", \"iloveu\", \r\n    \"asdf1234\", \"7777777\", \"987654321\", \"q1w2e3r4t5\", \"pass123\", \r\n    \"love\", \"dragon\", \"letmein123\", \"princess1\", \"zaq1xsw2\", \r\n    \"111111\", \"123321\", \"12345qwert\", \"1qaz\", \"qwe12345\", \"admin123\", \r\n    \"1111\", \"asdf123\", \"hello123\", \"112233\", \"admin1\", \"letmein!\", \r\n    \"trustme\", \"1q2w3e\", \"password321\", \"test123\", \"pa55word\", \r\n    \"loveyou\", \"password2\", \"123qwerty\", \"987654\", \"iloveme\", \r\n    \"asdf\", \"123654\", \"123qaz\", \"hello1\", \"mypassword\", \"happy123\"\r\n];\r\n \r\n\r\nexport const validatePassword = (password, confirmPassword, name, email) => {\r\n    const errors = {};\r\n\r\n    // Minimum length validation (8 characters)\r\n    if (password.length < 8) {\r\n        errors.password = 'Password must be at least 8 characters long.';\r\n        return errors; // Exit early to avoid other checks\r\n    }\r\n\r\n    // Password similarity to user attributes (e.g., name, email)\r\n    if (name && password.toLowerCase().includes(name.toLowerCase())) {\r\n        errors.password = 'Password is too similar to your name.';\r\n    }\r\n\r\n    if (email && password.toLowerCase().includes(email.split('@')[0].toLowerCase())) {\r\n        errors.password = 'Password is too similar to your email.';\r\n    }\r\n\r\n    // Common password validation\r\n    if (commonPasswords.includes(password)) {\r\n        errors.password = 'Password is too common, please choose a more secure one.';\r\n    }\r\n\r\n    // Enhanced password validation with regex for complexity\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*?])[A-Za-z\\d!@#$%^&*?]{8,}$/;\r\n    if (!passwordRegex.test(password)) {\r\n        errors.password = `Password must contain at least one uppercase letter, \r\n        one lowercase letter, one number, and one special character (@$!%*?&)`;\r\n    }\r\n\r\n    // Confirm Password validation\r\n    if (password !== confirmPassword) {\r\n        errors.confirmPassword = 'Passwords do not match.';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n"],"mappings":"AAAA,KAAM,CAAAA,eAAe,CAAG,CACpB,QAAQ,CAAE,UAAU,CAAE,WAAW,CAAE,UAAU,CAAE,OAAO,CAAE,SAAS,CACjE,QAAQ,CAAE,QAAQ,CAAE,WAAW,CAAE,QAAQ,CAAE,SAAS,CAAE,SAAS,CAC/D,QAAQ,CAAE,OAAO,CAAE,UAAU,CAAE,QAAQ,CAAE,UAAU,CAAE,UAAU,CAC/D,UAAU,CAAE,UAAU,CAAE,QAAQ,CAAE,UAAU,CAAE,YAAY,CAC1D,OAAO,CAAE,QAAQ,CAAE,aAAa,CAAE,QAAQ,CAAE,UAAU,CACtD,UAAU,CAAE,MAAM,CAAE,UAAU,CAAE,QAAQ,CAAE,QAAQ,CAAE,SAAS,CAC7D,UAAU,CAAE,SAAS,CAAE,QAAQ,CAAE,UAAU,CAAE,UAAU,CACvD,QAAQ,CAAE,WAAW,CAAE,QAAQ,CAAE,SAAS,CAAE,QAAQ,CACpD,OAAO,CAAE,QAAQ,CAAE,UAAU,CAAE,UAAU,CAAE,QAAQ,CACnD,QAAQ,CAAE,UAAU,CAAE,QAAQ,CAAE,QAAQ,CAAE,WAAW,CACrD,UAAU,CAAE,WAAW,CAAE,UAAU,CAAE,UAAU,CAAE,WAAW,CAC5D,OAAO,CAAE,UAAU,CAAE,OAAO,CAAE,QAAQ,CAAE,QAAQ,CAAE,QAAQ,CAC1D,UAAU,CAAE,SAAS,CAAE,WAAW,CAAE,YAAY,CAAE,SAAS,CAC3D,MAAM,CAAE,QAAQ,CAAE,YAAY,CAAE,WAAW,CAAE,UAAU,CACvD,QAAQ,CAAE,QAAQ,CAAE,YAAY,CAAE,MAAM,CAAE,UAAU,CAAE,UAAU,CAChE,MAAM,CAAE,SAAS,CAAE,UAAU,CAAE,QAAQ,CAAE,QAAQ,CAAE,UAAU,CAC7D,SAAS,CAAE,QAAQ,CAAE,aAAa,CAAE,SAAS,CAAE,UAAU,CACzD,SAAS,CAAE,WAAW,CAAE,WAAW,CAAE,QAAQ,CAAE,SAAS,CACxD,MAAM,CAAE,QAAQ,CAAE,QAAQ,CAAE,QAAQ,CAAE,YAAY,CAAE,UAAU,CACjE,CAGD,MAAO,MAAM,CAAAC,gBAAgB,CAAGA,CAACC,QAAQ,CAAEC,eAAe,CAAEC,IAAI,CAAEC,KAAK,GAAK,CACxE,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAEjB;AACA,GAAIJ,QAAQ,CAACK,MAAM,CAAG,CAAC,CAAE,CACrBD,MAAM,CAACJ,QAAQ,CAAG,8CAA8C,CAChE,MAAO,CAAAI,MAAM,CAAE;AACnB,CAEA;AACA,GAAIF,IAAI,EAAIF,QAAQ,CAACM,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,IAAI,CAACI,WAAW,CAAC,CAAC,CAAC,CAAE,CAC7DF,MAAM,CAACJ,QAAQ,CAAG,uCAAuC,CAC7D,CAEA,GAAIG,KAAK,EAAIH,QAAQ,CAACM,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACF,WAAW,CAAC,CAAC,CAAC,CAAE,CAC7EF,MAAM,CAACJ,QAAQ,CAAG,wCAAwC,CAC9D,CAEA;AACA,GAAIF,eAAe,CAACS,QAAQ,CAACP,QAAQ,CAAC,CAAE,CACpCI,MAAM,CAACJ,QAAQ,CAAG,0DAA0D,CAChF,CAEA;AACA,KAAM,CAAAS,aAAa,CAAG,0EAA0E,CAChG,GAAI,CAACA,aAAa,CAACC,IAAI,CAACV,QAAQ,CAAC,CAAE,CAC/BI,MAAM,CAACJ,QAAQ,uIACuD,CAC1E,CAEA;AACA,GAAIA,QAAQ,GAAKC,eAAe,CAAE,CAC9BG,MAAM,CAACH,eAAe,CAAG,yBAAyB,CACtD,CAEA,MAAO,CAAAG,MAAM,CACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}